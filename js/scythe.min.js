//@prepros-append _init.js
//@prepros-append utils.js

//@prepros-append game/index.js
//@prepros-append ui/index.js

//@prepros-append init.js

//@prepros-append _end.js
;(function(){
	"use strict";

	var log = console.log;
var cloneObject = function(orig){
	var destiny = {};
  for (var prop in orig) {
    if (orig.hasOwnProperty(prop)) {
      destiny[prop] = orig[prop];
    }
  }
  return destiny;
};

var capitalize = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
};

var extendObject = function () {
	var extended = {};

	// Merge the object into the extended object
	var merge = function (obj) {
    for ( var prop in obj ) {
      if (obj.hasOwnProperty(prop)) {
        if (Object.prototype.toString.call(obj[prop]) === '[object Object]') {
          // If we're doing a deep merge and the property is an object
          extended[prop] = extendObject(extended[prop], obj[prop]);
        } else {
          // Otherwise, do a regular merge
          extended[prop] = obj[prop];
        }
      }
    }
	};

	// Loop through each object and conduct a merge
	for (var i = 0; i < arguments.length; i++) {
		merge(arguments[i]);
	}

	return extended;
};
/* GAME API **************/
var GAME = null;

var GAMECONFIG = {
	factions: [{
		name: 'rusviet',
		power: 3,
		cards: 2
	}, {
		name: 'togawa',
		power: 0,
		cards: 2
	}, {
		name: 'crimean',
		power: 5,
		cards: 0
	}, {
		name: 'saxony',
		power: 1,
		cards: 4
	}, {
		name: 'polania',
		power: 2,
		cards: 3
	}, {
		name: 'albion',
		power: 3,
		cards: 0
	}, {
		name: 'nordic',
		power: 4,
		cards: 1
	}],
	playerTypes: [{
		name: 'None',
		ai: false,
		icon: ''
	},{
		name: 'Human',
		ai: false,
		icon: 'fa fa-user-o'
	}, {
		name: 'Autometta',
		ai: true,
		level: 'Easy',
		icon: 'fa fa-cogs',
		crossRiver: false,
		strategy: 1,
		stars: 0,
		timeline: [{}, {}, {}, {}, {}, {
			crossRiver: true
		}, {}, {}, {}, {}, {
			changeEstrategy: true,
			star: true
		}, {}, {}, {}, {}, {
			star: true
		}, {}, {}, {
			star: true
		}, {}, {
			star: true
		}, {}, {
			star: true
		}, {
			star: true
		}]
	}, {
		name: 'Automa',
		ai: true,
		level: 'Normal',
		icon: 'fa fa-cogs',
		crossRiver: false,
		strategy: 1,
		stars: 0,
		timeline: [{}, {}, {}, {}, {
			crossRiver: true
		}, {}, {}, {}, {}, {
			changeEstrategy: true,
			star: true
		}, {}, {}, {}, {}, {
			star: true
		}, {}, {}, {
			star: true
		}, {}, {
			star: true
		}, {
			star: true
		}, {
			star: true
		}]
	}, {
		name: 'Automaszyna',
		ai: true,
		level: 'Hard',
		icon: 'fa fa-cogs',
		crossRiver: false,
		strategy: 1,
		stars: 0,
		timeline: [{}, {}, {}, {
			crossRiver: true
		}, {}, {}, {}, {}, {}, {
			changeEstrategy: true,
			star: true
		}, {}, {}, {
			star: true
		}, {}, {
			star: true
		}, {}, {
			star: true
		}, {
			star: true
		}, {
			star: true
		}]
	}, {
		name: 'Ultimaszyna',
		ai: true,
		level: 'Very hard',
		icon: 'fa fa-cogs',
		crossRiver: true,
		strategy: 1,
		stars: 0,
		timeline: [{
			crossRiver: true
		}, {}, {}, {}, {}, {}, {}, {}, {
			changeEstrategy: true,
			star: true
		}, {}, {}, {
			star: true
		}, {}, {
			star: true
		}, {}, {
			star: true
		}, {
			star: true
		}, {
			star: true
		}]
	}]
};

/* CREATE GAME **************************************/
var createGame = function(factionToCreate) {
		var G = {};


// Create Players
var players = [],
	currentPlayerIndex = -1;

factionToCreate.forEach(function(facInd, i){
	if(facInd > 0){
		var player = cloneObject(GAMECONFIG.playerTypes[facInd]),
			faction = GAMECONFIG.factions[i];

		player.factionName = faction.name;
		player.power = faction.power;
		player.cards = faction.cards;
		player.board = {
			'worker': 6,
			'mech': 4
		};

		players.push(player);

		// Choose a Human player to start
		if(!player.ai){
			currentPlayerIndex = players.length - 1;
		} 
	}
});

G.currentPlayer = function(){
	return players[currentPlayerIndex];
};
G.advancePlayer = function(){
	currentPlayerIndex = currentPlayerIndex >= (players.length - 1) ? 0 : currentPlayerIndex + 1;
};

G.getPlayerByFaction = function(faction){
	var pl = null;
	players.forEach(function(p){
		if(p.factionName === faction){
			pl = p;
		}
	});
	return pl;
};

G.MAP = {
	'12': {
		'num': 12,
		'type': 'head',
		'factionHead': 'albion',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'15': {
		'num': 15,
		'type': 'head',
		'factionHead': 'nordic',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'22': {
		'num': 22,
		'type': 'iron',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'23': {
		'num': 23,
		'type': 'farm',
		'people': {
			'worker': 5,
			'mech': 0,
			'character': 0
		},
		'faction': 'crimean',
		'attack': {
			'faction': 'rusviet',
			'mech': 3,
		}
	},
	'24': {
		'num': 24,
		'type': 'aldea',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'25': {
		'num': 25,
		'type': 'wood',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'26': {
		'num': 26,
		'type': 'oil',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'27': {
		'num': 27,
		'type': 'aldea',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'31': {
		'num': 31,
		'type': 'lake',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'32': {
		'num': 32,
		'type': 'oil',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'33': {
		'num': 33,
		'type': 'lake',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'34': {
		'num': 34,
		'type': 'oil',
		'tunnel': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'35': {
		'num': 35,
		'type': 'iron',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'36': {
		'num': 36,
		'type': 'farm',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'37': {
		'num': 37,
		'type': 'farm',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'41': {
		'num': 41,
		'type': 'head',
		'factionHead': 'polania',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'42': {
		'num': 42,
		'type': 'wood',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'43': {
		'num': 43,
		'type': 'iron',
		'tunnel': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'44': {
		'num': 44,
		'type': 'wood',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'45': {
		'num': 45,
		'type': 'lake',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'46': {
		'num': 46,
		'type': 'wood',
		'tunnel': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'47': {
		'num': 47,
		'type': 'aldea',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'48': {
		'num': 48,
		'type': 'head',
		'factionHead': 'rusviet',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'51': {
		'num': 51,
		'type': 'farm',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'52': {
		'num': 52,
		'type': 'aldea',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': 'rusviet',
		'attack': null
	},
	'53': {
		'num': 53,
		'type': 'lake',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'54': {
		'num': 54,
		'type': 'factory',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'55': {
		'num': 55,
		'type': 'iron',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'56': {
		'num': 56,
		'type': 'oil',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'57': {
		'num': 57,
		'type': 'iron',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'61': {
		'num': 61,
		'type': 'wood',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'62': {
		'num': 62,
		'type': 'wood',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'63': {
		'num': 63,
		'type': 'farm',
		'tunnel': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'64': {
		'num': 64,
		'type': 'oil',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'65': {
		'num': 65,
		'type': 'lake',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'66': {
		'num': 66,
		'type': 'aldea',
		'tunnel': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'67': {
		'num': 67,
		'type': 'lake',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'71': {
		'num': 71,
		'type': 'iron',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'72': {
		'num': 72,
		'type': 'aldea',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'73': {
		'num': 73,
		'type': 'aldea',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'74': {
		'num': 74,
		'type': 'oil',
		'tunnel': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'75': {
		'num': 75,
		'type': 'wood',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'76': {
		'num': 76,
		'type': 'iron',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'77': {
		'num': 77,
		'type': 'oil',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'81': {
		'num': 81,
		'type': 'head',
		'factionHead': 'saxony',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'82': {
		'num': 82,
		'type': 'oil',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'83': {
		'num': 83,
		'type': 'lake',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'84': {
		'num': 84,
		'type': 'farm',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'85': {
		'num': 85,
		'type': 'iron',
		'encounter': true,
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'86': {
		'num': 86,
		'type': 'aldea',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'87': {
		'num': 87,
		'type': 'farm',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'88': {
		'num': 88,
		'type': 'head',
		'factionHead': 'togawa',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'93': {
		'num': 93,
		'type': 'head',
		'factionHead': 'crimean',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	},
	'94': {
		'num': 94,
		'type': 'aldea',
		'people': {
			'worker': 0,
			'mech': 0,
			'character': 0
		},
		'faction': null,
		'attack': null
	}
};

// init Map
var initialMap = {
	'rusviet': [48, 47, 57],
	'togawa': [88, 87, 77],
	'crimean': [93, 84, 94],
	'saxony': [81, 82, 71],
	'polania': [41, 42, 51],
	'albion': [12, 22, 23],
	'nordic': [15, 25, 26],
};
players.forEach(function(pl) {

	var fact = pl.factionName;
	var inMap = initialMap[fact];

	G.MAP[inMap[0]].faction = fact;
	G.MAP[inMap[0]].people.character = 1;

	G.MAP[inMap[1]].faction = fact;
	G.MAP[inMap[1]].people.worker = 1;

	G.MAP[inMap[2]].faction = fact;
	G.MAP[inMap[2]].people.worker = 1;
});

G.getBaseMapIndex = function(factionName){
	return initialMap[factionName][0];
};
/* DECK ***************/
var originalDeck = [{
	'num': 1,
	'e1': {
		'move': [{
			'type': 'worker',
			'faction': 'nordic'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'power'
		}, {
			'type': 'worker'
		}],
		'recruit': ['power']
	},
	'e2': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 4
		}],
		'recruit': ['power']
	},
	'advance': true,
	'combat': {
		'power': [6, 7, 7],
		'cards': 1
	},
	'resources': 1
}, {
	'num': 2,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'polania'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'money'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'polania'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'card'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['money']
	},
	'advance': true,
	'combat': {
		'power': [5, 6, 7],
		'cards': 2
	},
	'resources': 2
}, {
	'num': 3,
	'e1': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 2
		}, {
			'type': 'worker'
		}],
		'recruit': ['popularity']
	},
	'advance': true,
	'combat': {
		'power': [3, 7, 7],
		'cards': 0
	},
	'resources': 0
}, {
	'num': 4,
	'notAutometta': true,
	'e1': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'card'
		}],
		'recruit': ['card']
	},
	'e2': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'money',
			'count': 2
		}],
		'recruit': ['power']
	},
	'advance': false,
	'combat': {
		'power': [0, 1, 2],
		'cards': 1
	},
	'resources': 0
}, {
	'num': 5,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'albion'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'character_or_mech',
			'faction': 'togawa'
		}, {
			'type': 'worker'
		}, {
			'type': 'money'
		}],
		'recruit': ['money']
	},
	'e2': {
		'move': [{
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'count': 4
		}, {
			'type': 'worker'
		}],
		'recruit': ['card']
	},
	'advance': true,
	'combat': {
		'power': [2, 4, 7],
		'cards': 1
	},
	'resources': 4
}, {
	'num': 6,
	'e1': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 2
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'mech'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'power',
			'count': 2
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['power']
	},
	'advance': true,
	'combat': {
		'power': [7, 7, 7],
		'cards': 1
	},
	'resources': 0
}, {
	'num': 7,
	'notAutometta': true,
	'e1': {
		'move': [{
			'attack': 5,
			'type': 'character_or_mech',
			'faction': 'saxony'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'worker'
		}, {
			'type': 'money'
		}],
		'recruit': ['popularity']
	},
	'e2': {
		'move': [{
			'attack': 5,
			'type': 'character_or_mech',
			'faction': 'saxony'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'character_or_mech',
			'faction': 'rusviet'
		}, {
			'type': 'character_or_mech'
		}, {
			'type': 'card'
		}],
		'recruit': ['money']
	},
	'advance': true,
	'combat': {
		'power': [5, 7, 7],
		'cards': 0
	},
	'resources': 2
}, {
	'num': 8,
	'notAutometta': true,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'togawa'
		}, {
			'type': 'mech'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'character_or_mech',
			'faction': 'togawa'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'togawa'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'faction': 'saxony'
		}, {
			'type': 'money'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['money']
	},
	'advance': true,
	'combat': {
		'power': [0, 7, 7],
		'cards': 2
	},
	'resources': 1
}, {
	'num': 9,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'polania'
		}, {
			'type': 'mech'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'worker'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['popularity']
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'polania'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}, {
			'type': 'worker'
		}],
		'recruit': ['popularity']
	},
	'advance': true,
	'combat': {
		'power': [4, 7, 7],
		'cards': 1
	},
	'resources': 3
}, {
	'num': 10,
	'e1': {
		'move': [{
			'type': 'mech'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'character_or_mech'
		}, {
			'type': 'power',
			'count': 2
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'mech'
		}],
		'gain': [{
			'type': 'money',
			'count': 2
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': []
	},
	'advance': true,
	'combat': {
		'power': [0, 0, 0],
		'cards': 1
	},
	'resources': 1
}, {
	'num': 11,
	'e1': {
		'move': [{
			'type': 'mech'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'worker',
			'faction': 'rusviet'
		}, {
			'type': 'worker'
		}, {
			'type': 'money'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'worker',
			'faction': 'nordic'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}, {
			'type': 'worker'
		}],
		'recruit': ['card']
	},
	'advance': true,
	'combat': {
		'power': [6, 7, 7],
		'cards': 2
	},
	'resources': 0
}, {
	'num': 12,
	'e1': {
		'move': [{
			'type': 'worker',
			'faction': 'nordic'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'count': 4
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'worker',
			'faction': 'nordic'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'worker'
		}, {
			'type': 'money'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['power']
	},
	'advance': true,
	'combat': {
		'power': [4, 5, 7],
		'cards': 2
	},
	'resources': 1
}, {
	'num': 13,
	'e1': {
		'move': [{
			'attack': 4,
			'type': 'character_or_mech',
			'faction': 'saxony'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'money'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'attack': 5,
			'type': 'character_or_mech',
			'faction': 'saxony'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'card'
		}, {
			'type': 'money',
			'count': 2
		}],
		'recruit': ['money']
	},
	'advance': true,
	'combat': {
		'power': [3, 5, 7],
		'cards': 3
	},
	'resources': 0
}, {
	'num': 14,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'worker'
		}, {
			'type': 'card'
		}],
		'recruit': ['card']
	},
	'e2': {
		'move': [{
			'attack': 7,
			'type': 'character_or_mech'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}],
		'recruit': ['popularity']
	},
	'advance': true,
	'combat': {
		'power': [1, 1, 1],
		'cards': 1
	},
	'resources': 0
}, {
	'num': 15,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}, {
			'type': 'money'
		}],
		'recruit': ['money']
	},
	'e2': {
		'move': [{
			'attack': 1,
			'type': 'character_or_mech'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'money',
			'faction': 'crimean'
		}],
		'recruit': ['card']
	},
	'advance': false,
	'combat': {
		'power': [7, 7, 7],
		'cards': 0
	},
	'resources': 2
}, {
	'num': 16,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'character_or_mech'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'attack': 5,
			'type': 'character_or_mech'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'faction': 'saxony'
		}, {
			'type': 'character_or_mech'
		}, {
			'type': 'money'
		}],
		'recruit': []
	},
	'advance': true,
	'combat': {
		'power': [5, 7, 7],
		'cards': 1
	},
	'resources': 4
}, {
	'num': 17,
	'notAutometta': true,
	'e1': {
		'move': [{
			'attack': 6,
			'type': 'character_or_mech'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'count': 2
		}],
		'recruit': ['power']
	},
	'e2': {
		'move': [{
			'attack': 8,
			'type': 'character_or_mech'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'money'
		}, {
			'type': 'worker'
		}],
		'recruit': ['popularity']
	},
	'advance': false,
	'combat': {
		'power': [7, 7, 7],
		'cards': 2
	},
	'resources': 2
}, {
	'num': 18,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'worker',
			'faction': 'albion'
		}, {
			'type': 'worker'
		}, {
			'type': 'money'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'character_or_mech',
			'faction': 'albion'
		}, {
			'type': 'worker'
		}, {
			'type': 'money',
			'count': 2
		}],
		'recruit': []
	},
	'advance': true,
	'combat': {
		'power': [1, 1, 7],
		'cards': 0
	},
	'resources': 1
}, {
	'num': 19,
	'e1': {
		'move': [{
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'worker'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'albion'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}, {
			'type': 'money'
		}],
		'recruit': ['card']
	},
	'advance': true,
	'combat': {
		'power': [7, 7, 7],
		'cards': 1
	},
	'resources': 1
}];


// var c = [];
// originalDeck.forEach(function(b, k) {
// 	if (!b.advance) c.push(b.num);
// });

// log('c', c);
	return G;
};
/* END CREATE GAME **************************************/
//@prepros-prepend _init.js
//@prepros-prepend create.js
//@prepros-prepend map.js
//@prepros-prepend deck.js

//@prepros-prepend _end.js
//@prepros-append _init.js

//@prepros-append presentation.js
//@prepros-append alert.js
//@prepros-append view_new.js
//@prepros-append view_start_turn.js
//@prepros-append view_human_start.js
//@prepros-append view_map.js
//@prepros-append view_attack_worker.js

//@prepros-append _end.js
 /* UI *******************************************/
 (function() {

 		(function(){
 			var container = document.getElementById('scythe-container'),
 				width = 420,
				height = 560,
				mod = width/height,
 				resizeContainer = function(){
 					var w_width = window.innerWidth,
 						w_height = window.innerHeight;
 					if(w_width < width || w_height < height){
 						var modWin = w_width/w_height;
 						var scal = 1;
 						if(modWin < mod){
 							scal = w_width / width;
 							container.style.transformOrigin = '0 0';						
 						}else{
 							scal = w_height / height;
 							container.style.transformOrigin = '50% 0';	
 						}
 						container.style.transform = 'scale(' + scal + ',' + scal + ')';
 					}
 				};
 			resizeContainer();
 			window.addEventListener('resize',resizeContainer);
 		})();



 		/* LANGUAGE *****************************/
 		var language = {
 				'name': 'English',
 				'texts': {}
 			},
 			setLanguage = function(langName) {
 				if (window.scytheLanguages) {
 					var foundLang = false;
 					window.scytheLanguages.forEach(function(lang) {
 						if (lang.name === langName) {
 							language = cloneObject(lang);
 							foundLang = true;
 						}
 					});
 					if(!foundLang){
 						language = {
			 				'name': 'English',
			 				'texts': {}
			 			}
 					}
 				};
 			},
 			_i = function(str) {
 				return language.texts[str] || str;
 			};
 		/* END LANGUAGE *****************************/

 		/* CURRENT VIEW *****************************/

 		var currentView = ko.observable();
 		currentView.extend({ notify: 'always' });


 		var goToView = function(viewName,parameters){
 			currentView(viewName);
 		};

 		/* END CURRENT VIEW *****************************/

 		/* SHOW ALERT *****************************/

 		var alertViewText = ko.observable('');
 		alertViewText.extend({ notify: 'always' });


 		var showAlert = function(text){
 			alertViewText(text);
 		};

 		/* END SHOW ALERT *****************************/

 		/* VIEW MODELS *****************************/

 		var viewModelList = [];

 		var viewModel = {};

 		var bindAllModels = function(){
 			viewModelList.forEach(function(vm){
 				var newVM = vm();
 				viewModel[newVM.viewName] = newVM;
 			});
 		};

 		/* END VIEW MODELS *****************************/

//Presentation
var presentationVM = (function() {
	var vm = {
		current: ko.observable(true),
		lan: ko.observable('English'),
		languages: [],
		txt_continue: ko.observable(_i('Continue'))
	};

	if (window.scytheLanguages) {
		vm.isLang = true;
		vm.languages.push('English');
		window.scytheLanguages.forEach(function(lang) {
			vm.languages.push(lang.name);
		})
	} else {
		vm.isLang = false;
	}
	vm.lan.subscribe(function(v){		
		setLanguage(v);
		// texts
		vm.txt_continue(_i('Continue'));
	});

	vm.continueAction = function(){
		bindAllModels();
		vm.current(false);
		goToView('view_new');
	};



	ko.applyBindings(vm, document.getElementById('presentation'));
	return vm;
})();

// setTimeout(function(){
// 	presentationVM.continueAction();
// },300);


viewModelList.push(function() {
	var vm = {

		/*-----------------------*/
		viewName: 'view_alert',
		/*-----------------------*/

		current: ko.observable(false),
		// texts
		txt_ok: _i('Ok'),
		text:  ko.observable('')
	};

	vm.closeAlert = function(){
		alertViewText('');
	};

	alertViewText.subscribe(function(newValue) {
		vm.current(newValue !== '');
		vm.text(newValue);
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
var factionBtnVM = function(factionIndex, playerTypeIndex) {


	var faction = GAMECONFIG.factions[factionIndex];

	// Initial Player
	var player = GAMECONFIG.playerTypes[playerTypeIndex];
	var className = player.name === 'None' ? 'disabled' : faction.name;

	var vm = {
		title: _i(capitalize(faction.name)),
		className: ko.observable('faction-item ' + className),
		icon: 'images/factions/' + faction.name + '.png',
		power: faction.power,
		cards: faction.cards,
		playerName: ko.observable(_i(player.name)),
		playerIcon: ko.observable(player.icon),
		playerTypeIndex: playerTypeIndex
	};


	var length = GAMECONFIG.playerTypes.length;


	vm.changePlayer = function(){
		playerTypeIndex++;
		playerTypeIndex = playerTypeIndex >= length ? 0 : playerTypeIndex;

		var player = GAMECONFIG.playerTypes[playerTypeIndex];
		var className = player.name === 'None' ? 'disabled' : faction.name;

		vm.className('faction-item ' + className);
		vm.playerName(_i(player.name));
		vm.playerIcon(player.icon);

		vm.playerTypeIndex = playerTypeIndex;
	};

	return vm;
};


viewModelList.push(function() {

	var vm = {

		/*-----------------------*/
		viewName: 'view_new',
		/*-----------------------*/

		current: ko.observable(false),
		// texts
		txt_title: _i('New game'),
		txt_present: _i('Choose factions and players:'),
		txt_continue:  _i('Continue')
	};

	var facts = [];
	for (var i = 0; i < 7; i++) {
		var playerTypeIndex = 0;
		playerTypeIndex = i === 0 ? 1 : playerTypeIndex; // human
		playerTypeIndex = i === 2 ? 2 : playerTypeIndex; // ai - autometta

		var newFact = factionBtnVM(i, playerTypeIndex);
		facts.push(newFact);
	};
	vm.factions = ko.observableArray(facts);


	vm.continueAction = function(){
		var factions = vm.factions(),
			areHumans = false,
			areAI = false,
			factionsToStart = [];

		factions.forEach(function(fact){
			if(fact.playerTypeIndex === 1){
				areHumans = true;
			}
			if(fact.playerTypeIndex > 1){
				areAI = true;
			}
			factionsToStart.push(fact.playerTypeIndex);
		});		
		
		if(areHumans && areAI){
			GAME = createGame(factionsToStart);
			goToView('view_start_turn');			
		}else{
			showAlert(_i('Please, select almost 1 Human player and 1 Automa player.'));
		}
	};

	currentView.subscribe(function(newValue) {
		vm.current(newValue === vm.viewName);
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
viewModelList.push(function() {

	var vm = {

		/*-----------------------*/
		viewName: 'view_start_turn',
		/*-----------------------*/

		current: ko.observable(false),
		// texts
		txt_title: _i('Turn of'),
		txt_continue:  _i('Continue'),
		title: ko.observable(''),
		icon: ko.observable(''),
		playerName: ko.observable(''),
		playerIcon: ko.observable('')
	};

	var currentPlayer = null;

	vm.continueAction = function(){
		if(currentPlayer.ai){

		}else{
			goToView('view_human_start');
		}
	};

	currentView.subscribe(function(newValue) {
		vm.current(newValue === vm.viewName);
		if(GAME){
			currentPlayer = GAME.currentPlayer();
			vm.title(_i(capitalize(currentPlayer.factionName)));
			vm.icon('images/factions/' + currentPlayer.factionName + '.png');
			vm.playerName(_i(currentPlayer.name));
			vm.playerIcon(currentPlayer.icon);
		}
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
viewModelList.push(function() {

	var vm = {

		/*-----------------------*/
		viewName: 'view_human_start',
		/*-----------------------*/

		current: ko.observable(false),

		// texts
		title: ko.observable(''),
		icon: ko.observable(''),
		playerName: ko.observable(''),
		playerIcon: ko.observable(''),

		txt_choose:  _i('Please, choose one action to do:'),
		txt_move_add:  _i('MOVE or ADD units'),
		txt_continue:  _i('End your turn')		
	};

	var currentPlayer = null;

	vm.moveOrAddAction = function(){
		goToView('view_map');
	};
	vm.continueAction = function(){
		GAME.advancePlayer();
		goToView('view_start_turn');
	};

	currentView.subscribe(function(newValue) {
		vm.current(newValue === vm.viewName);
		if(GAME){
			currentPlayer = GAME.currentPlayer();
			vm.title(_i(capitalize(currentPlayer.factionName)));
			vm.icon('images/factions/' + currentPlayer.factionName + '.png');
			vm.playerName(_i(currentPlayer.name));
			vm.playerIcon(currentPlayer.icon);
		}
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
var mapConfig = {
	hex_width: 120,
	hex_height: 132,
	dx_map: 65,
	dy_map: 30,
	marginHex: 0
};

var mapForHuman = false;
var mapHumanMoveElement = ko.observable(null);
var mapHumanRollBackElement = ko.observable(null);
var mapCurrentPlayer = null;
var mapHumanChanges = ko.observable(null);

var hexagonMap = function(data) {
	var vm = {
		num: data.num,
		// Faction
		faction: ko.observable(data.faction),
		peopleFactionClass: ko.observable(data.faction ? 'people ' + data.faction : ''),

		// PEOPLE
		worker: ko.observable(data.people.worker),
		mech: ko.observable(data.people.mech),
		character: ko.observable(data.people.character),

		withEnemies: ko.observable(false),
		attack: null
	};


	// DRAW **************************/
	var draw = function() {
		vm.points = '';
		vm.points += mapConfig.hex_width / 2 + ',0 ';
		vm.points += mapConfig.hex_width + ',' + mapConfig.hex_height / 4 + ' ';
		vm.points += mapConfig.hex_width + ',' + mapConfig.hex_height * 3 / 4 + ' ';
		vm.points += mapConfig.hex_width / 2 + ',' + mapConfig.hex_height + ' ';
		vm.points += '0,' + mapConfig.hex_height * 3 / 4 + ' ';
		vm.points += '0,' + mapConfig.hex_height / 4;
		var isOdd = function(num) {
			return num % 2;
		};
		var num = '' + data.num,
			row = parseInt(num.charAt(0), 10),
			col = parseInt(num.charAt(1), 10);
		var dx = mapConfig.dx_map;
		dx += isOdd(row) ? (mapConfig.hex_width + mapConfig.marginHex) / 2 : 0;
		dx += (col - 1) * (mapConfig.hex_width + mapConfig.marginHex);
		var dy = mapConfig.dy_map;
		dy += (row - 1) * (mapConfig.hex_height * 3 / 4 + mapConfig.marginHex);
		vm.transform = 'translate(' + dx + ',' + dy + ')';
		// set style
		vm.className = 'hex';
		vm.className += data.type === 'head' ? '' : ' hexagon';
		// set Faction head icon
		vm.factionHeadImg = data.type === 'head';
		if (vm.factionHeadImg) {
			vm.factionHeadImgWidth = Math.round(mapConfig.hex_width * 0.7);
			vm.factionHeadImgX = 0.5 * (mapConfig.hex_width - vm.factionHeadImgWidth);
			vm.factionHeadImgY = 0.5 * (mapConfig.hex_height - vm.factionHeadImgWidth);
			vm.factionHeadImgHref = 'images/factions/' + data.factionHead + '.png';
		}
		// set Factory
		vm.factory = data.type === 'factory';
	};
	draw();
	// END DRAW **************************/


	var addElement = function(element) {
		var currentfaction = vm.faction();
		if (currentfaction === null) {
			vm.faction(element.faction);
			vm.peopleFactionClass('people ' + element.faction);
			var num = vm[element.type]();
			num++;
			vm[element.type](num);
		} else {
			if (currentfaction === element.faction) {
				var num = vm[element.type]();
				num++;
				vm[element.type](num);
			} else {
				// Attack
				if (element.type !== 'worker') {
					vm.withEnemies(true);
					if (!vm.attack) {
						vm.attack = {
							faction: element.faction
						};
					}
					if (!vm.attack[element.type]) {
						vm.attack[element.type] = 1;
					} else {
						vm.attack[element.type] += 1;
					}
				} else {
					// Roll back worker
					mapHumanRollBackElement(element);
				}
			}
		}
		mapHumanMoveElement(null);
		var mhCh = mapHumanChanges();
		if (!mhCh) {
			mhCh = {};
		}
		mhCh[vm.num] = true;
		mapHumanChanges(mhCh);
	};
	var quitElement = function(elementName) {
		mapHumanMoveElement({
			'type': elementName,
			'faction': vm.faction(),
			'from': data.num
		});
		var num = vm[elementName]();
		num = num < 1 ? 0 : num - 1;
		vm[elementName](num);

		// if hex is empty
		var poblation = vm.worker() + vm.mech() + vm.character();
		if (poblation === 0) {
			vm.faction(null);
		}
		var mhCh = mapHumanChanges();
		if (!mhCh) {
			mhCh = {};
		}
		mhCh[vm.num] = true;
		mapHumanChanges(mhCh);
	};



	vm.onClickHexagon = function() {
		var element = mapHumanMoveElement();
		if (mapForHuman && element) {
			// Add element
			addElement(element);
		}
	};
	vm.onClickWorker = function() {
		if (mapForHuman && mapCurrentPlayer.factionName === vm.faction()) {
			var element = mapHumanMoveElement();
			if (element) {
				// Add element
				addElement(element);
			} else {
				// Quit element
				quitElement('worker');
			}
		}
	};
	vm.onClickMech = function() {
		if (mapForHuman && mapCurrentPlayer.factionName === vm.faction()) {
			var element = mapHumanMoveElement();
			if (element) {
				// Add element
				addElement(element);
			} else {
				// Quit element
				quitElement('mech');
			}
		}
	};
	vm.onClickCharacter = function() {
		if (mapForHuman && mapCurrentPlayer.factionName === vm.faction()) {
			if (mapForHuman) {
				var element = mapHumanMoveElement();
				if (element) {
					// Add element
					addElement(element);
				} else {
					// Quit element
					quitElement('character');
				}
			}
		}
	};



	return vm;
};


viewModelList.push(function() {

	var mapCursorMove = false;

	var vm = {
		/*-----------------------*/
		viewName: 'view_map',
		/*-----------------------*/

		current: ko.observable(false),
		txt_lead_1: _i('Move your pieces by selecting in map'),
		txt_lead_2: _i('or add new pieces'),
		txt_continue: _i('Continue'),
		txt_add: _i('Add'),
		viewBox: '0 0 ' + (9 * (mapConfig.hex_width + mapConfig.marginHex)) + ' ' + (10 * (mapConfig.hex_height + mapConfig.marginHex) * 3 / 4),
		hexagons: ko.observableArray(),
		addAction: ko.observable(false),
		currentFaction: ko.observable(false),
		mapCursorVisible: ko.observable(false),
		mapCursorMech: ko.observable(false),
		mapCursorWorker: ko.observable(false),
		mapCursorCharacter: ko.observable(false),
		undoChangesEnabled: ko.observable(false)
	};

	var resetMap = function() {
		if (GAME) {
			mapCurrentPlayer = GAME.currentPlayer();
			mapHumanChanges(null);
			mapHumanMoveElement(null);
			mapHumanRollBackElement(null);

			mapForHuman = !mapCurrentPlayer.ai;
			vm.currentFaction(mapCurrentPlayer.factionName);
			var hexs = [];
			for (var a in GAME.MAP) {
				var d = GAME.MAP[a];
				var h = hexagonMap(d);
				hexs.push(h);
			}
			vm.hexagons(hexs);
		}
	};

	vm.addMech = function() {
		if (!mapHumanMoveElement()) {
			mapHumanMoveElement({
				'type': 'mech',
				'faction': vm.currentFaction()
			});
		}
	};
	vm.addWorker = function() {
		if (!mapHumanMoveElement()) {
			mapHumanMoveElement({
				'type': 'worker',
				'faction': vm.currentFaction()
			});
		}
	};

	vm.undoChanges = function() {
		if (vm.undoChangesEnabled()) {
			resetMap();
		}
	};

	vm.continueAction = function() {
		if (!mapHumanMoveElement()) {
			var hexs = vm.hexagons();
			var changes = [];

			var mhCh = mapHumanChanges();
			if (!mhCh) {
				mhCh = {};
			}
			hexs.forEach(function(hex) {
				if (mhCh[hex.num]) {
					var o = {
						'people': {
							'worker': hex.worker(),
							'mech': hex.mech(),
							'character': hex.character()
						},
						'faction': hex.faction()
					};

					if (hex.attack) {
						o.attack = cloneObject(hex.attack);
					}

					GAME.MAP[hex.num] = extendObject(GAME.MAP[hex.num], o);
				}
			});
			// Reset status
			mapHumanChanges(null);
			mapHumanMoveElement(null);
			mapHumanRollBackElement(null);
			mapCursorMove = false;
		};
	};


	/* SUBSCRIPTIONS */

	mapHumanMoveElement.subscribe(function(v) {
		var isMoving = v !== null;
		vm.mapCursorVisible(isMoving);
		mapCursorMove = isMoving;
		if (isMoving) {
			vm.mapCursorMech(v.type === 'mech');
			vm.mapCursorWorker(v.type === 'worker');
			vm.mapCursorCharacter(v.type === 'character');
		}
	});
	mapHumanRollBackElement.subscribe(function(v) {
		if (v !== null) {
			var hexs = vm.hexagons(),
				change = false;
			hexs.forEach(function(h) {
				if (h.num === v.from) {
					var p = h[v.type]();
					h[v.type](p + 1);
					h.faction(v.faction);
					change = true;
				}
			});
			if (change) {
				vm.hexagons(hexs);
			}
			mapHumanRollBackElement(null);
		}
	});
	mapHumanChanges.subscribe(function(v) {
		vm.undoChangesEnabled(!(v === null));
	});

	/* EVENT WINDOWS */
	var view_map = document.getElementById('view_map');
	var mapCursor = document.getElementById('map-cursor');
	window.addEventListener('mousedown', function(e) {
		var x = e.pageX - view_map.getBoundingClientRect().left - 16,
			y = e.pageY - 16;
		mapCursor.style = 'top:' + y + 'px;left:' + x + 'px';
	});
	window.addEventListener('mousemove', function(e) {
		if (mapCursorMove) {
			var x = e.pageX - view_map.getBoundingClientRect().left - 16,
				y = e.pageY - 16;
			mapCursor.style = 'top:' + y + 'px;left:' + x + 'px';
		}
	});


	/* VIEW SUBSCRIPTION */
	currentView.subscribe(function(newValue) {
		vm.current(newValue === vm.viewName);
		resetMap();
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
viewModelList.push(function () {

	var vm = {

		/*-----------------------*/
		viewName: 'view_attack_worker',
		/*-----------------------*/

		current: ko.observable(false),

		// texts
		title_1: ko.observable(''),
		icon_1: ko.observable('player-icon-unit'),
		playerName_1: ko.observable(''),
		playerIcon_1: ko.observable(''),

		title_2: ko.observable(''),
		icon_2: ko.observable('player-icon-unit'),
		playerName_2: ko.observable(''),
		playerIcon_2: ko.observable(''),

		numWorker: ko.observable(''),
		txt_attack: _i('attack'),
		txt_of: _i('of'),

		// txt_choose:  _i('Please, choose one action to do:'),
		// txt_move_add:  _i('MOVE or ADD units'),
		txt_continue: _i('End your turn')
	};

	var currentPlayer = null;

	var evaluateAttack = function () {
		var hex_attack = null;
		if (GAME) {
			
			for (var a in GAME.MAP) {
				var h = GAME.MAP[a];
				if (h.attack) {
					if (h.people.mech === 0 && h.people.character === 0) {
						hex_attack = cloneObject(h);
					}
				}
			}
			if (hex_attack) {
				var p1 = GAME.getPlayerByFaction(hex_attack.attack.faction);

				vm.title_1(_i(capitalize(p1.factionName)));
				vm.icon_1('player-icon-unit '+p1.factionName);
				vm.playerName_1(_i(p1.name));
				vm.playerIcon_1(p1.icon);

				var p2 = GAME.getPlayerByFaction(hex_attack.faction);

				vm.title_2(_i(capitalize(p2.factionName)));
				vm.icon_2('player-icon-unit '+p2.factionName);
				vm.playerName_2(_i(p2.name));
				vm.playerIcon_2(p2.icon);

				var num_of_Worker = hex_attack.people.worker;
				vm.numWorker(num_of_Worker + ' ' + (num_of_Worker > 1 ? _i('workers'):_i('worker')));

				// send workers to base
				var baseIndex = GAME.getBaseMapIndex(hex_attack.faction);
				GAME.MAP[baseIndex].faction = hex_attack.faction;
				GAME.MAP[baseIndex].people.worker += num_of_Worker;

				// quit of hex_attack
				GAME.MAP[hex_attack.num].faction = hex_attack.attack.faction;
				GAME.MAP[hex_attack.num].people.worker = 0;

				GAME.MAP[hex_attack.num].people.mech = hex_attack.attack.mech || 0;
				GAME.MAP[hex_attack.num].people.character = hex_attack.attack.character || 0;
				GAME.MAP[hex_attack.num].attack = null;
				
			}
			console.log(GAME.MAP);
		}
		return hex_attack;
	};


	vm.continueAction = function () {
		// GAME.advancePlayer();
		// goToView('view_start_turn');
	};

	currentView.subscribe(function (newValue) {
		vm.current(newValue === vm.viewName);
		
			
			evaluateAttack();

			
		
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
	function force(vn){
		bindAllModels();
		presentationVM.current(false);
		goToView(vn);
	}
	
	GAME = createGame([1,0,2,]);
	force('view_attack_worker');


})();
/* END UI *******************************************/
/* INIT *****************************/
})();
