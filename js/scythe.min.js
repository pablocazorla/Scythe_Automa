//@prepros-append _init.js
//@prepros-append utils.js

//@prepros-append game/index.js
//@prepros-append ui/index.js

//@prepros-append init.js

//@prepros-append _end.js
;(function(){
	"use strict";

	var log = console.log;
var cloneObject = function(orig){
	var destiny = {};
  for (var prop in orig) {
    if (orig.hasOwnProperty(prop)) {
      destiny[prop] = orig[prop];
    }
  }
  return destiny;
};

var capitalize = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
};
/* GAME API **************/
var GAME = null;

var GAMECONFIG = {
	factions: [{
		name: 'rusviet',
		power: 3,
		cards: 2
	}, {
		name: 'togawa',
		power: 0,
		cards: 2
	}, {
		name: 'crimean',
		power: 5,
		cards: 0
	}, {
		name: 'saxony',
		power: 1,
		cards: 4
	}, {
		name: 'polania',
		power: 2,
		cards: 3
	}, {
		name: 'albion',
		power: 3,
		cards: 0
	}, {
		name: 'nordic',
		power: 4,
		cards: 1
	}],
	playerTypes: [{
		name: 'None',
		ai: false,
		icon: ''
	},{
		name: 'Human',
		ai: false,
		icon: 'fa fa-user-o'
	}, {
		name: 'Autometta',
		ai: true,
		level: 'Easy',
		icon: 'fa fa-cogs',
		crossRiver: false,
		strategy: 1,
		stars: 0,
		timeline: [{}, {}, {}, {}, {}, {
			crossRiver: true
		}, {}, {}, {}, {}, {
			changeEstrategy: true,
			star: true
		}, {}, {}, {}, {}, {
			star: true
		}, {}, {}, {
			star: true
		}, {}, {
			star: true
		}, {}, {
			star: true
		}, {
			star: true
		}]
	}, {
		name: 'Automa',
		ai: true,
		level: 'Normal',
		icon: 'fa fa-cogs',
		crossRiver: false,
		strategy: 1,
		stars: 0,
		timeline: [{}, {}, {}, {}, {
			crossRiver: true
		}, {}, {}, {}, {}, {
			changeEstrategy: true,
			star: true
		}, {}, {}, {}, {}, {
			star: true
		}, {}, {}, {
			star: true
		}, {}, {
			star: true
		}, {
			star: true
		}, {
			star: true
		}]
	}, {
		name: 'Automaszyna',
		ai: true,
		level: 'Hard',
		icon: 'fa fa-cogs',
		crossRiver: false,
		strategy: 1,
		stars: 0,
		timeline: [{}, {}, {}, {
			crossRiver: true
		}, {}, {}, {}, {}, {}, {
			changeEstrategy: true,
			star: true
		}, {}, {}, {
			star: true
		}, {}, {
			star: true
		}, {}, {
			star: true
		}, {
			star: true
		}, {
			star: true
		}]
	}, {
		name: 'Ultimaszyna',
		ai: true,
		level: 'Very hard',
		icon: 'fa fa-cogs',
		crossRiver: true,
		strategy: 1,
		stars: 0,
		timeline: [{
			crossRiver: true
		}, {}, {}, {}, {}, {}, {}, {}, {
			changeEstrategy: true,
			star: true
		}, {}, {}, {
			star: true
		}, {}, {
			star: true
		}, {}, {
			star: true
		}, {
			star: true
		}, {
			star: true
		}]
	}]
};

/* CREATE GAME **************************************/
var createGame = function(factionToCreate) {
		var G = {};


// Create Players
var players = [],
	currentPlayerIndex = -1;
factionToCreate.forEach(function(facInd, i){
	if(facInd > 0){
		var player = cloneObject(GAMECONFIG.playerTypes[facInd]),
			faction = GAMECONFIG.factions[i];

		player.factionName = faction.name;
		player.power = faction.power;
		player.cards = faction.cards;

		players.push(player);

		// Choose a Human player to start
		if(!player.ai){
			currentPlayerIndex = players.length - 1;
		} 
	}
});

G.currentPlayer = function(){
	return players[currentPlayerIndex];
};
G.advancePlayer = function(){
	currentPlayerIndex = currentPlayerIndex >= (players.length - 1) ? 0 : currentPlayerIndex + 1;
};
/* DECK ***************/
var originalDeck = [{
	'num': 1,
	'e1': {
		'move': [{
			'type': 'worker',
			'faction': 'nordic'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'power'
		}, {
			'type': 'worker'
		}],
		'recruit': ['power']
	},
	'e2': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 4
		}],
		'recruit': ['power']
	},
	'advance': true,
	'combat': {
		'power': [6, 7, 7],
		'cards': 1
	},
	'resources': 1
}, {
	'num': 2,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'polania'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'money'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'polania'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'card'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['money']
	},
	'advance': true,
	'combat': {
		'power': [5, 6, 7],
		'cards': 2
	},
	'resources': 2
}, {
	'num': 3,
	'e1': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 2
		}, {
			'type': 'worker'
		}],
		'recruit': ['popularity']
	},
	'advance': true,
	'combat': {
		'power': [3, 7, 7],
		'cards': 0
	},
	'resources': 0
}, {
	'num': 4,
	'notAutometta': true,
	'e1': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'card'
		}],
		'recruit': ['card']
	},
	'e2': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'money',
			'count': 2
		}],
		'recruit': ['power']
	},
	'advance': false,
	'combat': {
		'power': [0, 1, 2],
		'cards': 1
	},
	'resources': 0
}, {
	'num': 5,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'albion'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'character_or_mech',
			'faction': 'togawa'
		}, {
			'type': 'worker'
		}, {
			'type': 'money'
		}],
		'recruit': ['money']
	},
	'e2': {
		'move': [{
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'count': 4
		}, {
			'type': 'worker'
		}],
		'recruit': ['card']
	},
	'advance': true,
	'combat': {
		'power': [2, 4, 7],
		'cards': 1
	},
	'resources': 4
}, {
	'num': 6,
	'e1': {
		'move': [{
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 2
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'mech'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'power',
			'count': 2
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['power']
	},
	'advance': true,
	'combat': {
		'power': [7, 7, 7],
		'cards': 1
	},
	'resources': 0
}, {
	'num': 7,
	'notAutometta': true,
	'e1': {
		'move': [{
			'attack': 5,
			'type': 'character_or_mech',
			'faction': 'saxony'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'worker'
		}, {
			'type': 'money'
		}],
		'recruit': ['popularity']
	},
	'e2': {
		'move': [{
			'attack': 5,
			'type': 'character_or_mech',
			'faction': 'saxony'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'character_or_mech',
			'faction': 'rusviet'
		}, {
			'type': 'character_or_mech'
		}, {
			'type': 'card'
		}],
		'recruit': ['money']
	},
	'advance': true,
	'combat': {
		'power': [5, 7, 7],
		'cards': 0
	},
	'resources': 2
}, {
	'num': 8,
	'notAutometta': true,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'togawa'
		}, {
			'type': 'mech'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'character_or_mech',
			'faction': 'togawa'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'togawa'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'faction': 'saxony'
		}, {
			'type': 'money'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['money']
	},
	'advance': true,
	'combat': {
		'power': [0, 7, 7],
		'cards': 2
	},
	'resources': 1
}, {
	'num': 9,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'polania'
		}, {
			'type': 'mech'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'worker'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['popularity']
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'polania'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}, {
			'type': 'worker'
		}],
		'recruit': ['popularity']
	},
	'advance': true,
	'combat': {
		'power': [4, 7, 7],
		'cards': 1
	},
	'resources': 3
}, {
	'num': 10,
	'e1': {
		'move': [{
			'type': 'mech'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'character_or_mech'
		}, {
			'type': 'power',
			'count': 2
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'mech'
		}],
		'gain': [{
			'type': 'money',
			'count': 2
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': []
	},
	'advance': true,
	'combat': {
		'power': [0, 0, 0],
		'cards': 1
	},
	'resources': 1
}, {
	'num': 11,
	'e1': {
		'move': [{
			'type': 'mech'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'worker',
			'faction': 'rusviet'
		}, {
			'type': 'worker'
		}, {
			'type': 'money'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'worker',
			'faction': 'nordic'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}, {
			'type': 'worker'
		}],
		'recruit': ['card']
	},
	'advance': true,
	'combat': {
		'power': [6, 7, 7],
		'cards': 2
	},
	'resources': 0
}, {
	'num': 12,
	'e1': {
		'move': [{
			'type': 'worker',
			'faction': 'nordic'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'count': 4
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'worker',
			'faction': 'nordic'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'worker'
		}, {
			'type': 'money'
		}, {
			'type': 'character_or_mech'
		}],
		'recruit': ['power']
	},
	'advance': true,
	'combat': {
		'power': [4, 5, 7],
		'cards': 2
	},
	'resources': 1
}, {
	'num': 13,
	'e1': {
		'move': [{
			'attack': 4,
			'type': 'character_or_mech',
			'faction': 'saxony'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'money'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'attack': 5,
			'type': 'character_or_mech',
			'faction': 'saxony'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'card'
		}, {
			'type': 'money',
			'count': 2
		}],
		'recruit': ['money']
	},
	'advance': true,
	'combat': {
		'power': [3, 5, 7],
		'cards': 3
	},
	'resources': 0
}, {
	'num': 14,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'worker'
		}, {
			'type': 'card'
		}],
		'recruit': ['card']
	},
	'e2': {
		'move': [{
			'attack': 7,
			'type': 'character_or_mech'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}],
		'recruit': ['popularity']
	},
	'advance': true,
	'combat': {
		'power': [1, 1, 1],
		'cards': 1
	},
	'resources': 0
}, {
	'num': 15,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}, {
			'type': 'money'
		}],
		'recruit': ['money']
	},
	'e2': {
		'move': [{
			'attack': 1,
			'type': 'character_or_mech'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'money',
			'faction': 'crimean'
		}],
		'recruit': ['card']
	},
	'advance': false,
	'combat': {
		'power': [7, 7, 7],
		'cards': 0
	},
	'resources': 2
}, {
	'num': 16,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'character_or_mech'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'attack': 5,
			'type': 'character_or_mech'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'mech'
		}],
		'gain': [{
			'type': 'power',
			'faction': 'saxony'
		}, {
			'type': 'character_or_mech'
		}, {
			'type': 'money'
		}],
		'recruit': []
	},
	'advance': true,
	'combat': {
		'power': [5, 7, 7],
		'cards': 1
	},
	'resources': 4
}, {
	'num': 17,
	'notAutometta': true,
	'e1': {
		'move': [{
			'attack': 6,
			'type': 'character_or_mech'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'count': 2
		}],
		'recruit': ['power']
	},
	'e2': {
		'move': [{
			'attack': 8,
			'type': 'character_or_mech'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'money',
			'faction': 'crimean'
		}, {
			'type': 'money'
		}, {
			'type': 'worker'
		}],
		'recruit': ['popularity']
	},
	'advance': false,
	'combat': {
		'power': [7, 7, 7],
		'cards': 2
	},
	'resources': 2
}, {
	'num': 18,
	'e1': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'worker',
			'faction': 'albion'
		}, {
			'type': 'worker'
		}, {
			'type': 'money'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory'
		}, {
			'type': 'character'
		}],
		'gain': [{
			'type': 'character_or_mech',
			'faction': 'albion'
		}, {
			'type': 'worker'
		}, {
			'type': 'money',
			'count': 2
		}],
		'recruit': []
	},
	'advance': true,
	'combat': {
		'power': [1, 1, 7],
		'cards': 0
	},
	'resources': 1
}, {
	'num': 19,
	'e1': {
		'move': [{
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'worker'
		}],
		'recruit': []
	},
	'e2': {
		'move': [{
			'type': 'encounter_or_factory',
			'faction': 'albion'
		}, {
			'attack': 'worker',
			'type': 'worker'
		}, {
			'type': 'worker'
		}],
		'gain': [{
			'type': 'power',
			'count': 3
		}, {
			'type': 'money'
		}],
		'recruit': ['card']
	},
	'advance': true,
	'combat': {
		'power': [7, 7, 7],
		'cards': 1
	},
	'resources': 1
}];


// var c = [];
// originalDeck.forEach(function(b, k) {
// 	if (!b.advance) c.push(b.num);
// });

// log('c', c);
	return G;
};
/* END CREATE GAME **************************************/
//@prepros-prepend _init.js
//@prepros-prepend create.js
//@prepros-prepend deck.js

//@prepros-prepend _end.js
//@prepros-append _init.js

//@prepros-append presentation.js
//@prepros-append alert.js
//@prepros-append view_new.js
//@prepros-append view_start_turn.js
//@prepros-append view_human_start.js

//@prepros-append _end.js
 /* UI *******************************************/
 (function() {

 		(function(){
 			var container = document.getElementById('scythe-container'),
 				width = 420,
				height = 560,
				mod = width/height,
 				resizeContainer = function(){
 					var w_width = window.innerWidth,
 						w_height = window.innerHeight;
 					if(w_width < width || w_height < height){
 						var modWin = w_width/w_height;
 						var scal = 1;
 						if(modWin < mod){
 							scal = w_width / width;
 							container.style.transformOrigin = '0 0';						
 						}else{
 							scal = w_height / height;
 							container.style.transformOrigin = '50% 0';	
 						}
 						container.style.transform = 'scale(' + scal + ',' + scal + ')';
 					}
 				};
 			resizeContainer();
 			window.addEventListener('resize',resizeContainer);
 		})();



 		/* LANGUAGE *****************************/
 		var language = {
 				'name': 'English',
 				'texts': {}
 			},
 			setLanguage = function(langName) {
 				if (window.scytheLanguages) {
 					var foundLang = false;
 					window.scytheLanguages.forEach(function(lang) {
 						if (lang.name === langName) {
 							language = cloneObject(lang);
 							foundLang = true;
 						}
 					});
 					if(!foundLang){
 						language = {
			 				'name': 'English',
			 				'texts': {}
			 			}
 					}
 				};
 			},
 			_i = function(str) {
 				return language.texts[str] || str;
 			};
 		/* END LANGUAGE *****************************/

 		/* CURRENT VIEW *****************************/

 		var currentView = ko.observable();
 		currentView.extend({ notify: 'always' });


 		var goToView = function(viewName,parameters){
 			currentView(viewName);
 		};

 		/* END CURRENT VIEW *****************************/

 		/* SHOW ALERT *****************************/

 		var alertViewText = ko.observable('');
 		alertViewText.extend({ notify: 'always' });


 		var showAlert = function(text){
 			alertViewText(text);
 		};

 		/* END SHOW ALERT *****************************/

 		/* VIEW MODELS *****************************/

 		var viewModelList = [];

 		var viewModel = {};

 		var bindAllModels = function(){
 			viewModelList.forEach(function(vm){
 				var newVM = vm();
 				viewModel[newVM.viewName] = newVM;
 			});
 		};

 		/* END VIEW MODELS *****************************/

//Presentation
var presentationVM = (function() {
	var vm = {
		current: ko.observable(true),
		lan: ko.observable('English'),
		languages: [],
		txt_continue: ko.observable(_i('Continue'))
	};

	if (window.scytheLanguages) {
		vm.isLang = true;
		vm.languages.push('English');
		window.scytheLanguages.forEach(function(lang) {
			vm.languages.push(lang.name);
		})
	} else {
		vm.isLang = false;
	}
	vm.lan.subscribe(function(v){		
		setLanguage(v);
		// texts
		vm.txt_continue(_i('Continue'));
	});

	vm.continueAction = function(){
		bindAllModels();
		vm.current(false);
		goToView('view_new');
	};



	ko.applyBindings(vm, document.getElementById('presentation'));
	return vm;
})();

// setTimeout(function(){
// 	presentationVM.continueAction();
// },300);


viewModelList.push(function() {
	var vm = {

		/*-----------------------*/
		viewName: 'view_alert',
		/*-----------------------*/

		current: ko.observable(false),
		// texts
		txt_ok: _i('Ok'),
		text:  ko.observable('')
	};

	vm.closeAlert = function(){
		alertViewText('');
	};

	alertViewText.subscribe(function(newValue) {
		vm.current(newValue !== '');
		vm.text(newValue);
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
var factionBtnVM = function(factionIndex, playerTypeIndex) {


	var faction = GAMECONFIG.factions[factionIndex];

	// Initial Player
	var player = GAMECONFIG.playerTypes[playerTypeIndex];
	var className = player.name === 'None' ? 'disabled' : faction.name;

	var vm = {
		title: _i(capitalize(faction.name)),
		className: ko.observable('faction-item ' + className),
		icon: 'images/factions/' + faction.name + '.png',
		power: faction.power,
		cards: faction.cards,
		playerName: ko.observable(_i(player.name)),
		playerIcon: ko.observable(player.icon),
		playerTypeIndex: playerTypeIndex
	};


	var length = GAMECONFIG.playerTypes.length;


	vm.changePlayer = function(){
		playerTypeIndex++;
		playerTypeIndex = playerTypeIndex >= length ? 0 : playerTypeIndex;

		var player = GAMECONFIG.playerTypes[playerTypeIndex];
		var className = player.name === 'None' ? 'disabled' : faction.name;

		vm.className('faction-item ' + className);
		vm.playerName(_i(player.name));
		vm.playerIcon(player.icon);

		vm.playerTypeIndex = playerTypeIndex;
	};

	return vm;
};


viewModelList.push(function() {

	var vm = {

		/*-----------------------*/
		viewName: 'view_new',
		/*-----------------------*/

		current: ko.observable(false),
		// texts
		txt_title: _i('New game'),
		txt_present: _i('Choose factions and players:'),
		txt_continue:  _i('Continue')
	};

	var facts = [];
	for (var i = 0; i < 7; i++) {
		var playerTypeIndex = 0;
		playerTypeIndex = i === 0 ? 1 : playerTypeIndex; // human
		playerTypeIndex = i === 2 ? 2 : playerTypeIndex; // ai - autometta

		var newFact = factionBtnVM(i, playerTypeIndex);
		facts.push(newFact);
	};
	vm.factions = ko.observableArray(facts);


	vm.continueAction = function(){
		var factions = vm.factions(),
			areHumans = false,
			areAI = false,
			factionsToStart = [];

		factions.forEach(function(fact){
			if(fact.playerTypeIndex === 1){
				areHumans = true;
			}
			if(fact.playerTypeIndex > 1){
				areAI = true;
			}
			factionsToStart.push(fact.playerTypeIndex);
		});		
		
		if(areHumans && areAI){
			GAME = createGame(factionsToStart);
			goToView('view_start_turn');			
		}else{
			showAlert(_i('Please, select almost 1 Human player and 1 Automa player.'));
		}
	};

	currentView.subscribe(function(newValue) {
		vm.current(newValue === vm.viewName);
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
viewModelList.push(function() {

	var vm = {

		/*-----------------------*/
		viewName: 'view_start_turn',
		/*-----------------------*/

		current: ko.observable(false),
		// texts
		txt_title: _i('Turn of'),
		txt_continue:  _i('Continue'),
		title: ko.observable(''),
		icon: ko.observable(''),
		playerName: ko.observable(''),
		playerIcon: ko.observable('')
	};

	var currentPlayer = null;

	vm.continueAction = function(){
		if(currentPlayer.ai){

		}else{
			goToView('view_human_start');
		}
	};

	currentView.subscribe(function(newValue) {
		vm.current(newValue === vm.viewName);
		if(GAME){
			currentPlayer = GAME.currentPlayer();
			vm.title(_i(capitalize(currentPlayer.factionName)));
			vm.icon('images/factions/' + currentPlayer.factionName + '.png');
			vm.playerName(_i(currentPlayer.name));
			vm.playerIcon(currentPlayer.icon);
		}
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
viewModelList.push(function() {

	var vm = {

		/*-----------------------*/
		viewName: 'view_human_start',
		/*-----------------------*/

		current: ko.observable(false),

		// texts
		title: ko.observable(''),
		icon: ko.observable(''),
		playerName: ko.observable(''),
		playerIcon: ko.observable(''),

		txt_choose:  _i('Please, choose one action to do:'),		
		txt_add:  _i('ADD a worker or mech'),
		txt_move:  _i('MOVE a worker or mech'),
		txt_continue:  _i('End your turn')		
	};

	var currentPlayer = null;

	vm.addAction = function(){
		
	};
	vm.moveAction = function(){
		
	};
	vm.continueAction = function(){
		GAME.advancePlayer();
		goToView('view_start_turn');
	};

	currentView.subscribe(function(newValue) {
		vm.current(newValue === vm.viewName);
		if(GAME){
			currentPlayer = GAME.currentPlayer();
			vm.title(_i(capitalize(currentPlayer.factionName)));
			vm.icon('images/factions/' + currentPlayer.factionName + '.png');
			vm.playerName(_i(currentPlayer.name));
			vm.playerIcon(currentPlayer.icon);
		}
	});
	ko.applyBindings(vm, document.getElementById(vm.viewName));
	return vm;
});
	function force(vn){
		bindAllModels();
		presentationVM.current(false);
		goToView(vn);
	}
	
	//GAME = createGame([1,0,2]);
	//force('view_human_start');


})();
/* END UI *******************************************/
/* INIT *****************************/
})();
